#!/usr/bin/env python3

'''
Helper commands for Nomad.
'''

import os
import sys
import argparse
import textwrap


# ===== Parse arguments =====


def parse_args():
    '''
    Parse command line args. Return meta string and indent.
    '''

    parser = argparse.ArgumentParser(usage='%(prog)s <command> [arguments]')
    subparsers = parser.add_subparsers(
        title='available commands', dest='command', metavar='<command>')
    subparsers.required = True

    meta_parser = subparsers.add_parser(
        'meta',
        help='Render nomad client "meta" block.',
        prog='{} {}'.format(parser.prog, 'meta'),
        usage='%(prog)s [arguments]')
    meta_parser.add_argument(
        'meta', help='String format of <key>=<value>,<key>=<value>,...')
    meta_parser.add_argument(
        '-i', '--indent', dest='indent', type=int, default=0, help='Indent.')

    host_volumes_parser = subparsers.add_parser(
        'host-volumes',
        help='Render nomad client "host_volume" stanzas.',
        prog='{} {}'.format(parser.prog, 'meta'),
        usage='%(prog)s [arguments]')
    host_volumes_parser.add_argument(
        'host_volumes',
        help='String format of <name>:<path>:<owner>:<group>:<read_only>,...')
    host_volumes_parser.add_argument(
        '-i', '--indent', dest='indent', type=int, default=0, help='Indent.')

    return parser.parse_args()


# ===== Command meta =====


def parse_meta_string(meta_string):
    '''
    Parse meta string to k/v dict
    '''
    return dict(x.split('=') for x in meta_string.split(','))


def render_meta_block(meta_dict, indent):
    '''
    Render nomad client "meta" block. See
    https://www.nomadproject.io/docs/configuration/client.html#meta
    '''
    brace_indent = indent * ' '
    meta_indent = (indent + 2) * ' '

    print(textwrap.indent('meta {', brace_indent))
    for key, value in meta_dict.items():
        meta = "\"{}\" = \"{}\"".format(key, value)
        print(textwrap.indent(meta, meta_indent))
    print(textwrap.indent('}', brace_indent))


def meta_command(args):
    meta_dict = parse_meta_string(args.meta)
    render_meta_block(meta_dict, args.indent)


# ===== Command host-volume =====


def parse_host_volumes_string(s):
    list = []
    for x in s.split(','):
        values = x.split(':')
        if len(values) != 5:
            exit(1, f'Invalid input for host volumes: {s}')
        list.append({
            'name': values[0],
            'path': values[1],
            'owner': values[2],
            'group': values[3],
            'read_only': values[4] == 'true',
        })
    return list


def create_volume_paths(volumes):
    for v in volumes:
        mkdir = f"sudo mkdir -p {v['path']}"
        if os.system(mkdir) != 0:
            exit(1, f"Failed to execute command: {mkdir}")
        chown = f"sudo chown {v['owner']}:{v['group']} {v['path']}"
        if os.system(chown) != 0:
            exit(1, f"Failed to execute command: {chown}")


def render_host_volume_stanzas(volumes, indent):
    '''
    Render nomad client "host_volume" stanza. See
    https://nomadproject.io/docs/configuration/client/#host_volume-stanza
    '''
    brace_indent = indent * ' '
    parameters_indent = (indent + 2) * ' '

    for v in volumes:
        name = v['name']
        path = v['path']
        read_only = 'true' if v['read_only'] else 'false'
        print(textwrap.indent(f'host_volume "{name}" {{', brace_indent))
        print(textwrap.indent(f'path = "{path}"', parameters_indent))
        print(textwrap.indent(f'read_only = {read_only}', parameters_indent))
        print(textwrap.indent('}', brace_indent))


def host_volumes_command(args):
    volumes = parse_host_volumes_string(args.host_volumes)
    create_volume_paths(volumes)
    render_host_volume_stanzas(volumes, args.indent)


def log(message):
    print(message, file=sys.stderr)


def exit(status=0, message=None):
    if message:
        log(message)
    sys.exit(status)


def execute():
    args = parse_args()
    commands = {
        'meta': meta_command,
        'host-volumes': host_volumes_command,
    }
    commands[args.command](args)


if __name__ == "__main__":
    execute()
